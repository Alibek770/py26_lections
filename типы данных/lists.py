'========================================= Тип данных - LISTS(списки)========================================='

# #list - изменяемый тип данных, который представляет с собой коллекцию какой либо последовательности

# list_ = [12,23, True, False, [12, 'astr'], 'str', None, [12, []]]

# #index y list

# list_ = [1,2,8,10]

# print(list_[2]) #8
# print(list_[1::2]) #[2,10] срез

# list_ = [10, 5, 2, 10 [0,0,0,1,0]]

# print(list_[4][3])

# str_ = "helloworld"
# list_ = list(str_) #list - функция
# print(list_) #['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']

# list_ = [1,2,3,4,5,20,True,False,None,'str']
# lists_len=len(list_) #функция для подсчета элементов
# print(lists_len) #10

'========================================== Тип данных - Tuple(кортеж)============================================='

#tuple - неизменяемый тип данных являющийся последовательностью элементов, литералами являются запятые и круглые скобки

# tuple_ = (1,2,3,4) #tuple_ круглые скобки
# list_ = [1,2,3,4] #list_ квадратные скобки

# print(tuple_)
# print(list_)

'=============================================== Range ==========================================='

#range(start, end, step) - это генератор последовательности 

#в новой версии питона это тип данынх 

# range_ = range(0,11)
# print(list(range_)) # [0,1,2,3,4,5,6,7,8,9,10]
# print(tuple(range_)) # (0,1,2,3,4,5,6,7,8,9,10)

'======================================= Цикл(for, while) ========================================'

#for - это цикл, который работает до конца итерируемного обьекта

#while - это цикл, который работает пока условие True

'FOR'
# meshok = ['potato', 'tomato', 'onion']
# kastrula = []
# for ovoshi in meshok: 
#     print(ovoshi)
#     kastrula.append(ovoshi)

#     print(kastrula)

# for i in range(0,11,2): #[0,1,2,4,6,8,10]
#      print(i)
# for i in range(0,11): #в квадрате
#     print(i ** 2)
# for i in 'makers bootcamp':
#     print(f'Это буква - {i}')

# 'WHILE'
# i = 0
# while i <= 10:
#     print(f'hello world, это {i} итерация')
#     i+=1

'BREAK, CONTINUE'

#break - это оператор циклов, который ломает цикл и выходит из него

#continue - это оператор циклов, который пропускает итерацию 

# i = 0
# while True:
#     if i == 5:
#         break
#     print(f'hello world, это {i} итерация')
#     i+=1

# i = 0
# while i < 5:
#     i = i + 1
#     if i == 2:
#       continue
#     print(f'hello world, это {i} итерация')
     

'-----------------------------------------------------------------------------------------'

# for i in range(11):
#     if i ==5:
#         break
#     print(f'это {i} итерация')

# for i in range(11):
#     if i ==5:
#         continue #пропускаеи итерацию когда i == 5 и продолжает работу цикла
#     print(f'это {i} итерация')

'========================================== Методы листа(списков) ==================================='

# print(dir(list)) #dir(list) - функция для просмотра листа

'APPEND()'

#list.append(element) - это метод листов, который добавляет указанный элемент в конец листа

# list_ =[]
# for i in range(0, 11, 2):
#     list_.append(i)

# print(list_)
'-----------------------------------------------------------------------------------------------------'
# list_ =[]
# for i in range(11):
#     if i % 2 == 0: 
#         list_.append(True)
#     elif i == 5:
#         list_.append(None)
# else:
#     list_.append(False)

   
# print(list_) #[True, True, True, True, True, True, False]
# list_ = [1,2,3,True,False,'Rem']

# list_.append('Anton')
# print(list_)

'------------------------------------------------------------------------------'

'EXTEND()'

#list_1.extend(list_2) - это метод листов, который расширяет первый лист засчет второго 

# list_1 = [1,2,3]
# list_2 = [4,5,6]

# list_1.extend(list_2) #[1,2,3,4,5,6] EXTEND
# print(len(list_1))

'-------------------------------------------------------------------------------'

'INSERT()'

#list.insert(index, element) - это метод листов, который на место index добавляет element

'-------------------------------------------------------------------------------'

# list_ = [0,0,0,0,0,0,0]

# list_.insert(3,True)

# print(list_)

'--------------------------------------------------------------------------------'

# list_ = [25, 12, 45, 'makers', None, [1,2,3,4,5,6,7,9]]

# list_[5].insert(-1, "Elon Musk")

# print(list_)

'--------------------------------------------------------------------------------'

'INDEX'

#list.index(element, start, end) - это метод листов, который находит индекс указанного элемента

# list_ = ['NYC', 'Moscow', 'SP', 'Bishkek', 'Osh']

# for city in list_:
#     print(f'Город - {city} под индексом {list_.index(city)}')

"---------------------------------------------------------------------------------"

'POP()'

#list.pop(index) - это метод листов, который удаляет элемент по указанному индексу, если индекс не
#  указать он удалит последний элемент.

# list_ = [1,2,3,4,5,6,7]

# pop_element = list_.pop(5)

# print(list_)
# print(pop_element)

'--------------------------------------------------------------------------------------------------'

# list_ = [1,2,3,4,5,6,7]

# pop_element = list_.pop(25)

# print(list_)
# print(pop_element)

'--------------------------------------------------------------------------------------------------'

'REMOVE()'

#list.remove(element) - это метод листов, для удаления какого либо элемента, 
# если такого элемента нет то выйдет ошибка

'--------------------------------------------------------------------------------------------------'

# list_ = [1,2,3,4,5,6,7, 'helloq']

# list_.remove('helloq')

# print(list_)

'--------------------------------------------------------------------------------------------------'

'SORT()'

#list.sort(key=len, reverse=True) - это метод листов, для сортировки его элементов

# list_ = ['SultanKatana', 'SanjarKadyrkulov', 'Aigerim', 'Erkaym']

# list_.sort(reverse = True)

# print(list_)

'-------------------------------------------------------------------------------------'

# list_ = [1,23,11,0,23,66]

# list_.sort(reverse=True)

# print(list_)

'--------------------------------------------------------------------------------------'

'COUNT()'

#list.count(element) - это метод листов, который считает сколько elements есть в листе

# list_ = [1, 231, 31, 3, 6, 2, 1, 1, 3, 1, 12, 1, 'hello', 'whatsup']

# count_list = list_.count(1) #5 раз встречается цифра 1 в листе

# print(count_list)

'COPY(), DEEPCOPY()'

#list.copy() - это метод листов, который копирует лист поверхностно
#copy.deepcopy(list) - это метод листов, который копирует лист углубленно

"--------------------------------------------------------------------------"

# list_ = [1,2,3,4,5[1,2,3]]

# copy_list = list_.copy()

# list_[-1].append(0)

# print(list_)
# print(copy_list)

"--------------------------------------------------------------------------"

# import copy

# list_1 = [1,2,3,4,5]

# copy_list = copy.deepcopy(list_1)

# print(list_1)
# print(copy_list)

"---------------------------------------------------------------------------"

'Reverse()'

# list.reverse() - это метод листов, который переворачивает лист 

# list_ = [1,2,3,4,5,6,7,8]

# list_.reverse()

# print(list_)

# print(dir(list))

# a = int(input())
# b = int(input())
# c = int(input())
# if a == 90 or b == 90 or c == 90:
#     print("rectangular")
# elif a < 90 or b < 90 or c < 90:
#     print("acute")
# elif a > 90 or b > 90 or c > 90:
#     print ("obtuse")
# else:
#     print("impossible")

